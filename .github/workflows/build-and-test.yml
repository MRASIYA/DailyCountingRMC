name: Build and Test Daily Counting App

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.9
      uses: actions/setup-python@v3
      with:
        python-version: 3.9
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
    
    - name: Create test Excel file
      run: |
        python -c "
        import pandas as pd
        from openpyxl import Workbook
        
        # Create test Excel file
        wb = Workbook()
        ws = wb.active
        ws.title = 'Sheet1'
        
        # Add headers
        ws['A1'] = 'Daily Counting System'
        ws['A2'] = 'Inventory Management'
        ws['A3'] = 'Reference'
        ws['B3'] = 'Material Code'
        ws['C3'] = 'Material Name'
        ws['D3'] = 'Unit'
        ws['E3'] = 'Price'
        ws['F3'] = 'Received'
        ws['G3'] = 'Issues'
        ws['H3'] = 'Return'
        
        # Add test data
        test_data = [
            ['REF001', 'MAT001', 'Steel Bars', 'KG', 25.50, 150, 120, 5],
            ['REF002', 'MAT002', 'Concrete Mix', 'BAG', 15.00, 200, 180, 10],
            ['REF003', 'MAT003', 'Wood Planks', 'PCS', 8.75, 75, 60, 2]
        ]
        
        for i, row_data in enumerate(test_data, start=4):
            for j, value in enumerate(row_data, start=1):
                ws.cell(row=i, column=j, value=value)
        
        wb.save('ISSUES.xlsx')
        print('Test Excel file created')
        "
    
    - name: Test Excel loading
      run: |
        python -c "
        from excel_app import load_materials, get_current_stock
        materials = load_materials()
        stock = get_current_stock()
        print(f'✅ Materials loaded: {len(materials)}')
        print(f'✅ Stock data loaded: {len(stock)}')
        assert len(materials) > 0, 'No materials loaded'
        assert len(stock) > 0, 'No stock data loaded'
        "
    
    - name: Test Flask app startup
      run: |
        python -c "
        from excel_app import app
        with app.test_client() as client:
            # Test main page
            response = client.get('/')
            assert response.status_code == 200, 'Main page failed'
            
            # Test API endpoints
            response = client.get('/api/materials')
            assert response.status_code == 200, 'Materials API failed'
            
            response = client.get('/api/stock')
            assert response.status_code == 200, 'Stock API failed'
            
            print('✅ Flask app tests passed')
        "
    
    - name: Test JSON conversion
      run: |
        python excel_to_json.py
        echo '✅ JSON conversion completed'
    
    - name: Validate JSON files
      run: |
        python -c "
        import json
        
        # Check materials.json
        with open('docs/materials.json', 'r') as f:
            materials = json.load(f)
            assert len(materials) > 0, 'No materials in JSON'
            print(f'✅ Materials JSON: {len(materials)} items')
        
        # Check stock_data.json
        with open('docs/stock_data.json', 'r') as f:
            stock = json.load(f)
            assert len(stock) > 0, 'No stock data in JSON'
            print(f'✅ Stock JSON: {len(stock)} items')
        
        # Check metadata.json
        with open('docs/metadata.json', 'r') as f:
            metadata = json.load(f)
            assert 'total_materials' in metadata, 'Missing metadata'
            print(f'✅ Metadata JSON: {metadata[\"total_materials\"]} materials')
        "
    
    - name: Test Docker build
      run: |
        docker build -t daily-counting-test .
        echo '✅ Docker build successful'

  deploy-pages:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.9
      uses: actions/setup-python@v3
      with:
        python-version: 3.9
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Create test Excel and generate JSON
      run: |
        # Create minimal test Excel for GitHub Pages
        python -c "
        import pandas as pd
        from openpyxl import Workbook
        
        wb = Workbook()
        ws = wb.active
        ws.title = 'Sheet1'
        
        # Headers
        ws['A1'] = 'Daily Counting System'
        ws['A2'] = 'Inventory Management'
        ws['B3'] = 'Material Code'
        ws['C3'] = 'Material Name'
        ws['F3'] = 'Received'
        ws['G3'] = 'Issues'
        ws['H3'] = 'Return'
        
        # Sample data
        data = [
            ['MAT001', 'Steel Bars', 150, 120, 5],
            ['MAT002', 'Concrete Mix', 200, 180, 10],
            ['MAT003', 'Wood Planks', 75, 60, 2],
            ['MAT004', 'Paint', 50, 45, 3],
            ['MAT005', 'Screws', 1000, 800, 20]
        ]
        
        for i, (code, name, recv, issued, ret) in enumerate(data, start=4):
            ws.cell(row=i, column=2, value=code)
            ws.cell(row=i, column=3, value=name)
            ws.cell(row=i, column=6, value=recv)
            ws.cell(row=i, column=7, value=issued)
            ws.cell(row=i, column=8, value=ret)
        
        wb.save('ISSUES.xlsx')
        "
        
        # Generate JSON files for GitHub Pages
        python excel_to_json.py
    
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs
        force_orphan: true
